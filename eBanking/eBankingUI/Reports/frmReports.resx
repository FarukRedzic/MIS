<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAEAIACoEAAAJgAAABAQAAABACAAaAQAAM4QAAAoAAAAIAAAAEAAAAABACAAAAAAAIAQ
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALeBHj23fx5/t38dqLd+
        HL+3fhzJt34c0bd+HNa3fhzKt34cybd+HMq3fhzJt34cyrd+HMm3fhzKt34cybd+HNO3fhzQt34cy7d+
        HL63fx2ot38efrmBHj0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALiCID+4fx3tuYIg/7yF
        Jv+8hij/vYcp/72HKf+9hyn/vYcr/72HKf+9hyn/vYcp/72HKf+9hyn/vYcp/72HKf+9hyn/vYcr/72H
        Kf+9hyn/vYcp/7yGKP+8hSb/uYIg/7h/Hey4giBAAAAAAAAAAAAAAAAAAAAAAAAAAAC6gSEnuYAf/72I
        K/++iSz9voks/76JLP2+iSz/voks/b6JLP++iSz9voks/76JLP2+iSz/voks/b6JLP++iSz9voks/76J
        LP2+iSz/voks/b6JLP++iSz9voks/76JLP2+iSz/vYgr/7mAH/+5gyInAAAAAAAAAAAAAAAAAAAAALqC
        H6e+iCn/v4ot/7+KLP+/iiz/v4os/7+KLP+/iiz/v4os/7+KLP+/iiz/v4os/7+KLP+/iiz/v4os/7+K
        LP+/iiz/v4os/7+KLP+/iiz/v4os/7+KLP+/iiz/v4os/7+KLP+/ii3/vogp/7qCH6cAAAAAAAAAAAAA
        AAAAAAAAuYIg38CLL//Aiy//wIsv/cCLL//Aiy/9wIsv/8CLL/3Aiy//wIsv/cCLL//Aiy/9wIsv/8CL
        L/3Aiy//wIsv/cCLL//Aiy/9wIsv/8CLL/3Aiy//wIsv/cCLL//Aiy/9wIsv/8CLL/3Aiy//uYIg3wAA
        AAAAAAAAAAAAAAAAAAC8gyHowYwx/8GLL//Biy//wYsv/8GLL//Biy//wYsv/8GLL//Biy//wYsv/8GM
        L//BjDD/wYww/8GMMP/BjDD/wYwv/8GLL//Biy//wYsv/8GLL//Biy//wYsv/8GLL//Biy//wYsv/8GM
        Mf+8gyHpAAAAAAAAAAAAAAAAAAAAAL2EItfCjTL/wo4y/8KOMv3CjjL/wo4y/cKOMv/CjjL9wo4y/8KO
        Mv3CjjL/wo0z/cCKLP+9hST7vYUk+8CKKv/CjTP/wo4y/cKOMv/CjjL9wo4y/8KOMv3CjjL/wo4y/cKO
        Mv/CjjL9wo0y/72EIt0AAAAAAAAAAAAAAAAAAAAAvocksMKNMf/DjzT/w480/8OPNP/DjzT/w480/8OP
        NP/DjzT/w480/8OPNP/Aiiv/vockrr+IKAW/iCcGvoUkqsCLK//DjzX/w480/8OPNP/DjzT/w480/8OP
        NP/DjzT/w480/8OPNP/CjjH/vockuwAAAAAAAAAAAAAAAAAAAADBiCdvw40v/8SQNv/Ejzb9xI82/8SP
        Nv3Ejzb/xI82/cSPNv/EkDb9w480/8CHJNoAAAAAAAAAAAAAAAAAAAAAwIck0cOPMv/EkDb/xI82/cSP
        Nv/Ejzb9xI82/8SPNv3Ejzb/xJA2/cOOMP/BiSaEAAAAAAAAAAAAAAAAAAAAAMKLKhnCiyn/xZI5/8WS
        OP/Fkjj/xZI4/8WSOP/Fkjj/xZI4/8WSOf/CjCv/woorPwAAAAAAAAAAAAAAAAAAAADCiyouwooq/8WS
        Of/Fkjj/xZI4/8WSOP/Fkjj/xZI4/8WSOP/Fkjn/wowr/8KKKzYAAAAAAAAAAAAAAAAAAAAAAAAAAMOK
        KLfGkTX/xZM6/cWSOv/Fkjr9xZI6/8WSOv3Fkzr/xpI4/8OKKc0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADDiim1xpE1/8WTOv3Fkjr/xZI6/cWSOv/Fkjr9xZI6/8aTOf/DiyjkAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAxY4tJsWNK//IlTz/yJU8/8iVPP/IlTz/yJU8/8iVPf/FkDD/xY0tTgAAAAAAAAAAAAAAAAAA
        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
</value>
  </data>
</root>